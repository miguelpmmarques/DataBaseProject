# Generated by Django 2.2.6 on 2019-11-18 13:38

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('isConfirmed', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('isCaptain', models.BooleanField(default=False)),
                ('isTournamentManager', models.BooleanField(default=False)),
                ('citizen_card', models.BigIntegerField(default=0)),
                ('first_name', models.CharField(max_length=512, null=True)),
                ('last_name', models.CharField(max_length=512, null=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region='PT')),
                ('budget', models.BigIntegerField(default=0)),
                ('hierarchy', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, null=True, upload_to='users/%Y/%m/%d/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilizador',
                'verbose_name_plural': 'Utilizadores',
                'db_table': 'CustomUser',
                'ordering': ['-username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField(null=True)),
            ],
            options={
                'verbose_name': 'Dia',
                'verbose_name_plural': 'Dias',
                'db_table': 'Day',
                'ordering': ['-day'],
            },
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=512)),
            ],
            options={
                'verbose_name': 'Campo',
                'verbose_name_plural': 'Campos',
                'db_table': 'Field',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.IntegerField(default=0)),
                ('field', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Field')),
                ('gameDate', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='main.Day')),
            ],
            options={
                'verbose_name': 'Jogo',
                'verbose_name_plural': 'Jogos',
                'db_table': 'Game',
                'ordering': ['-gameDate'],
            },
        ),
        migrations.CreateModel(
            name='GameWeekDay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_day', models.CharField(choices=[('0', 'Monday'), ('1', 'Tuesday'), ('2', 'Wednesday'), ('3', 'Thursday'), ('4', 'Friday'), ('5', 'Saturday'), ('6', 'Sunday')], default=0, max_length=2)),
            ],
            options={
                'verbose_name': 'Dia de Semana',
                'verbose_name_plural': 'Dias de Semana',
                'db_table': 'WeekDay',
                'ordering': ['-week_day'],
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=512, unique=True)),
                ('start', models.BooleanField()),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Posicao',
                'verbose_name_plural': 'Posicoes',
                'db_table': 'Position',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Tactic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='tatica', max_length=20)),
                ('positions', models.ManyToManyField(to='main.Position')),
            ],
            options={
                'verbose_name': 'Tatica',
                'db_table': 'Tactic',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=512, unique=True)),
                ('beginTournament', models.DateTimeField(null=True)),
                ('endTournament', models.DateTimeField(null=True)),
                ('number_of_hands', models.IntegerField(default=0)),
                ('number_teams', models.IntegerField(default=0)),
                ('tournament_badge', models.ImageField(blank=True, null=True, upload_to='users/%Y/%m/%d/')),
                ('days_without_games', models.ManyToManyField(to='main.Day')),
                ('fields', models.ManyToManyField(to='main.Field')),
                ('game_week_days', models.ManyToManyField(to='main.GameWeekDay')),
                ('tournament_manager', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Torneio',
                'verbose_name_plural': 'Torneio',
                'db_table': 'Tournament',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=200)),
                ('description', models.TextField(null=True)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(auto_now=True)),
                ('cost', models.IntegerField(default=0)),
                ('isFree', models.BooleanField(default=True)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Field')),
                ('tournament', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Tournament')),
            ],
            options={
                'verbose_name': 'Intervalo de tempo',
                'verbose_name_plural': 'Intervalos de tempo',
                'db_table': 'TimeSlot',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=512)),
                ('numberPlayers', models.IntegerField(default=1, null=True)),
                ('teamLogo', models.ImageField(blank=True, null=True, upload_to='images/', verbose_name='teamLogo')),
                ('captain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(blank=True, related_name='players', to=settings.AUTH_USER_MODEL)),
                ('tactic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Tactic')),
                ('tournament', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Tournament')),
            ],
            options={
                'verbose_name': 'Equipa',
                'verbose_name_plural': 'Equipas',
                'db_table': 'Team',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_score', models.IntegerField(default=0)),
                ('away_score', models.IntegerField(default=0)),
                ('home_team', models.CharField(default='', max_length=512)),
                ('away_team', models.CharField(default='', max_length=512)),
                ('game', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='main.Game')),
                ('player_scores', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Resultado',
                'verbose_name_plural': 'Resultados',
                'db_table': 'Result',
                'ordering': ['-home_score'],
            },
        ),
        migrations.AddField(
            model_name='game',
            name='timeslot',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='main.TimeSlot'),
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.Tournament'),
        ),
    ]
